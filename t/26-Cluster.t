#!/usr/bin/perl -w
#
#  tests for both normal and lowmem matrices, where they overlap in methods

use 5.010;
use strict;
use warnings;
use Carp;

use FindBin qw/$Bin/;
use rlib;
use List::Util qw /first/;

use Test::More;

use English qw / -no_match_vars /;
local $| = 1;

use Data::Section::Simple qw(get_data_section);

use Test::More; # tests => 2;
use Test::Exception;

use Biodiverse::TestHelpers qw /:cluster :tree/;
use Biodiverse::Cluster;

my $default_prng_seed = 2345;
my @linkages = qw /
    link_average
    link_recalculate
    link_minimum
    link_maximum
    link_average_unweighted
/;


use Devel::Symdump;
my $obj = Devel::Symdump->rnew(__PACKAGE__); 
my @subs = grep {$_ =~ 'main::test_'} $obj->functions();
#
#use Class::Inspector;
#my @subs = Class::Inspector->functions ('main::');

exit main( @ARGV );


sub main {
    my @args  = @_;

    if (@args) {
        for my $name (@args) {
            die "No test method test_$name\n"
                if not my $func = (__PACKAGE__->can( 'test_' . $name ) || __PACKAGE__->can( $name ));
            $func->();
        }
        done_testing;
        return 0;
    }

    foreach my $sub (sort @subs) {
        no strict 'refs';
        $sub->();
    }
    
    done_testing;
    return 0;
}


#  make sure we get the same result with the same prng across two runs
sub test_same_results_given_same_prng_seed {
    my $data = get_cluster_mini_data();
    my $bd = get_basedata_object (data => $data, CELL_SIZES => [1,1]);
    
    check_order_is_same_given_same_prng (basedata_ref => $bd);
    
    my $site_bd = get_basedata_object_from_site_data(CELL_SIZES => [200000, 300000]);
    check_order_is_same_given_same_prng (basedata_ref => $site_bd);
}

sub test_linkages_delete_outputs {
    _test_linkages (delete_outputs => 1);
}

sub test_linkages_no_delete_outputs {
    _test_linkages (delete_outputs => 0);
}

sub _test_linkages {
    my %args = @_;
    
    use Config;
    my $bits = $Config{archname} =~ /x(86_64|64)/ ? 64 : 32;

    local $TODO = 'These tests only pass on 64 bit architectures' if $bits != 64;

    my $bd = get_basedata_object_from_site_data(CELL_SIZES => [100000, 100000]);

    foreach my $linkage (@linkages) {
        my $cl = $bd->add_cluster_output (
            name => $linkage,
            #CLUSTER_TIE_BREAKER => [ENDW_WE => 'max'],  #  need to update expected values before using the tie breaker
            MATRIX_INDEX_PRECISION => undef,  #  use old default for now
        );
        $cl->run_analysis (
            prng_seed        => $default_prng_seed,
            linkage_function => $linkage,
        );

        my $comparison_tree = get_site_data_as_tree ($linkage);

        my $suffix = $args{delete_outputs} ? ', no matrix recycle' : ', recycled matrix';

        my $are_same = $cl->trees_are_same (comparison => $comparison_tree);
        ok ($are_same, "Exact match using $linkage" . $suffix);

        #say join "\n", ('======') x 4;
        #say "=== $linkage " . $cl->to_newick;
        #say join "\n", ('======') x 4;

        my $nodes_have_matching_terminals = $cl->trees_are_same (
            comparison     => $comparison_tree,
            terminals_only => 1,
        );
        ok (
            $nodes_have_matching_terminals,
            "Nodes have matching terminals using $linkage" . $suffix,
        );

        if ($args{delete_outputs}) {
            $bd->delete_all_outputs;
        }
    }    
}

sub test_linkages_and_check_replication {
    cluster_test_linkages_and_check_replication (
        type          => 'Biodiverse::Cluster',
        linkage_funcs => \@linkages,
    );
}

sub test_tie_breaker_croak_on_missing_args  {
    my $data = get_cluster_mini_data();
    my $bd = get_basedata_object (data => $data, CELL_SIZES => [1,1]);
    my $tie_breaker = 'PD';

    my $cl1 = $bd->add_cluster_output (
        name => "should croak",
        CLUSTER_TIE_BREAKER => [$tie_breaker => 'max'],
    );
    my $success = eval {
        $cl1->run_analysis ();
    };
    my $e = $EVAL_ERROR;
    isnt ($e, '', 'Tie breaker croaked when missing an argument');
    #note $e;
}

sub test_linkages_and_check_mx_precision {
    cluster_test_linkages_and_check_mx_precision(type => 'Biodiverse::Cluster');
}


#  need to add tie breaker
sub check_order_is_same_given_same_prng {
    my %args = @_;
    my $bd = $args{basedata_ref};
    
    my $prng_seed = $args{prng_seed} || $default_prng_seed;
    
    my $cl1 = $bd->add_cluster_output (name => 'cl1');
    my $cl2 = $bd->add_cluster_output (name => 'cl2');
    my $cl3 = $bd->add_cluster_output (name => 'cl3');
    
    $cl1->run_analysis (
        prng_seed => $prng_seed,
    );
    $cl2->run_analysis (
        prng_seed => $prng_seed,
    );
    $cl3->run_analysis (
        prng_seed => $prng_seed + 1,  #  different prng
    );
    
    my $newick1 = $cl1->to_newick;
    my $newick2 = $cl2->to_newick;
    my $newick3 = $cl3->to_newick;
    
    is   ($newick1, $newick2, 'trees are the same');
    isnt ($newick1, $newick3, 'trees are not the same');
}


#  Need to use an index that needs arguments
#  so we exercise the whole shebang.
sub test_matrix_recycling {
    my %args = @_;
    cluster_test_matrix_recycling (
        %args,
        index => 'SORENSON',
        type => 'Biodiverse::Cluster',
    );

    
    #  need to test one with different phylogenetic trees
    
}

sub test_no_matrix_recycling_when_indices_differ {
    my %args = @_;
    
    cluster_test_no_matrix_recycling_when_indices_differ (
        %args,
        indices => [qw/SORENSON JACCARD/],
        type => 'Biodiverse::Cluster',
    );
}

#  shadow matrix should contain all pair combinations across both matrices?
#  No - let user do so explicitly using sp_select_all() as final condition.
sub test_two_spatial_conditions {
    my %args = @_;

    my $bd = get_basedata_object_from_site_data(CELL_SIZES => [200000, 200000]);
    my $tie_breaker = [ENDW_WE => 'max'];

    my %analysis_args = (
        cache_abc          => 0,
        index              => 'SORENSON',
        linkage_function   => 'link_average',
    );

    my $cond1 = '$nbr_y > 1500000 && $y > 1500000';
    my $spatial_conditions1 = [$cond1];
    my $spatial_conditions2 = [
        $cond1,
        'sp_select_all()',
    ];

    #  run cl2 before cl1 for debugging purposes
    my $cl2 = $bd->add_cluster_output (name => 'cl2');
    $cl2->set_param (CLUSTER_TIE_BREAKER => $tie_breaker);
    $cl2->set_param (CACHE_ABC => 0);
    $cl2->run_analysis (
        %analysis_args,
        spatial_conditions => $spatial_conditions2,
    );


    my $cl1 = $bd->add_cluster_output (name => 'cl1');
    $cl1->set_param (CLUSTER_TIE_BREAKER => $tie_breaker);
    $cl1->set_param (CACHE_ABC => 0);
    $cl1->run_analysis (
        %analysis_args,
        spatial_conditions => $spatial_conditions1,
    );

    ok (
        $cl1->contains_tree (comparison => $cl1),
        'contains_tree works - cluster 1 contains itself'
    );

    #  Ignore the root node since it can have a different length
    #  and thus won't always match.
    ok (
        $cl2->contains_tree (comparison => $cl1, ignore_root => 1),
        'Cluster with two conditions contains cluster with one condition '
        . 'when first spatial condition is same'
    );

    my $block_cond = 'sp_block (size => 400000)';
    my $spatial_conditions3 = [$block_cond];
    my $spatial_conditions4 = [$block_cond, 'sp_select_all()'];
    
    my $cl3 = $bd->add_cluster_output (name => 'cl3');
    $cl3->set_param (CLUSTER_TIE_BREAKER => $tie_breaker);
    $cl3->set_param (CACHE_ABC => 0);
    $cl3->run_analysis (
        %analysis_args,
        spatial_conditions => $spatial_conditions3,
    );
    
    my $cl4 = $bd->add_cluster_output (name => 'cl4');
    $cl4->set_param (CLUSTER_TIE_BREAKER => $tie_breaker);
    $cl4->set_param (CACHE_ABC => 0);
    $cl4->run_analysis (
        %analysis_args,
        spatial_conditions => $spatial_conditions4,
    );
    
    ok (
        $cl3->contains_tree (comparison => $cl3),
        'contains_tree works for sp_block - cluster 3 contains itself'
    );
    my $cl3_root_child_count = $cl3->get_child_count;

    #  Ignore the root node and its immediate children
    #  since they can have different lengths
    #  and thus won't always match.
    ok (
        $cl4->contains_tree (
            comparison  => $cl3,
            ignore_root => 1,
            correction  => -$cl3_root_child_count,
        ),
        'Cluster with two conditions contains cluster with condition '
        . 'when first spatial condition is same (sp_block)'
    );


    my $spatial_conditions5 = [$block_cond, $cond1];
    my $spatial_conditions6 = [$block_cond, $cond1, 'sp_select_all()'];
    
    my $cl5 = $bd->add_cluster_output (name => 'cl5');
    $cl5->set_param (CLUSTER_TIE_BREAKER => $tie_breaker);
    $cl5->set_param (CACHE_ABC => 0);
    $cl5->run_analysis (
        %analysis_args,
        spatial_conditions => $spatial_conditions5,
    );

    my $cl6 = $bd->add_cluster_output (name => 'cl6');
    $cl6->set_param (CLUSTER_TIE_BREAKER => $tie_breaker);
    $cl6->set_param (CACHE_ABC => 0);
    $cl6->run_analysis (
        %analysis_args,
        spatial_conditions => $spatial_conditions6,
    );
    
    ok (
        $cl6->contains_tree (comparison => $cl6),
        'contains_tree works for triple conditions'
    );
    my $cl5_root_child_count = $cl5->get_child_count;

    #  Ignore the root node and its immediate children
    #  since they can have different lengths
    #  and thus won't always match.
    ok (
        $cl6->contains_tree (
            comparison  => $cl5,
            ignore_root => 1,
            correction  => -$cl5_root_child_count,
        ),
        'Cluster with three conditions contains cluster with two conditions'
    );
    
    
}


sub test_exception_for_invalid_linkage {
    my $data = get_cluster_mini_data();
    my $bd = get_basedata_object (data => $data, CELL_SIZES => [1,1]);
    
    my $cl = $bd->add_cluster_output (name => 'test invalid linkage');
    my $success = eval {
        $cl->run_analysis (linkage_function => 'link_barry_the_wonder_dog');
        1;
    };
    my $e = $@;
    ok ($e, 'exception thrown when invalid linkage function passed');

    my $cl2 = $bd->add_cluster_output (name => 'test undef linkage');
    $success = eval {
        $cl2->run_analysis ();
        1;
    };
    $e = $@;
    ok (!$e, 'no exception thrown when no linkage function passed');
    
}

######################################


sub get_cluster_mini_data_newick {
    return q{((('2.5:1.5':0,'3.5:1.5':0,'3.5:2.5':0)'3___':0.2,('1.5:1.5':0,'1.5:2.5':0,'2.5:2.5':0)'2___':0.2)'4___':0)'5___':0}
}

sub get_site_data_as_tree {
    my $comp_nwk = get_site_data_newick_tree(@_);

    my $read_nex = Biodiverse::ReadNexus->new();
    my $success = eval {$read_nex->import_data (data => $comp_nwk)};
    croak $@ if $@;

    my $tree_arr = $read_nex->get_tree_array;
    my $comparison_tree = $tree_arr->[0];

    return $comparison_tree;
}

sub get_site_data_newick_tree {
    my $label = shift // 'link_average';
    my $data = get_data_section('SITE_DATA_NEWICK_TREE');
    $data =~ s/\n+\z//m;  #  clear all trailing newlines
    my @data = split "\n", $data;
    while (my $line = shift @data) {
        next if not $line =~ /^$label/;
        my ($name, $newick) = split / /, $line;
        return $newick;
    }
    croak "should not get this far\n";
}


sub cluster_test_no_matrix_recycling_when_indices_differ {
    my %args = @_;
    my $type  = $args{type}  // 'Biodiverse::Cluster';
    my $indices = $args{indices} // [qw /JACCARD SORENSON/];
    my $tie_breaker = exists $args{tie_breaker}  #  use undef if the user passed the arg key
        ? $args{tie_breaker}
        : [
           ENDW_WE => 'maximise',
           PD      => 'maximise',
           ABC3_SUM_ALL => 'maximise',
           none         => 'maximise'
        ];


    my $bd1 = get_basedata_object_from_site_data(CELL_SIZES => [300000, 300000]);
    #my $bd2 = $bd1->clone;

    my $tree_ref1 = $args{tree_ref} // get_tree_object_from_sample_data();

    my $index1 = $indices->[0];
    my $index2 = $indices->[1];

    my %analysis_args = (
        %args,
        tree_ref => $tree_ref1,
        cluster_tie_breaker => $tie_breaker,
    );

    my $cl1a = $bd1->add_output (name => 'cl1a mx recyc', type => $type);
    $cl1a->run_analysis (%analysis_args, index => $index1);

    my $cl1b = $bd1->add_output (name => 'cl1b mx recyc', type => $type);
    $cl1b->run_analysis (%analysis_args, index => $index2);

    ok (
        !$cl1a->trees_are_same (comparison => $cl1b),
        'Clustering does not reycle matrices when index differs',
    );

    check_matrices_differ ($cl1a, $cl1b, 'JACCARD vs SORENSON');

    my $cl1c = $bd1->add_output (name => 'cl1c mx recyc', type => $type);
    $cl1c->run_analysis (%analysis_args, index => 'PHYLO_JACCARD');

    my $cl1d = $bd1->add_output (name => 'cl1d mx recyc', type => $type);
    $cl1d->run_analysis (%analysis_args, index => 'PHYLO_SORENSON');

    ok (
        !$cl1c->trees_are_same (comparison => $cl1d),
        'Clustering does not reycle matrices when index differs',
    );

    check_matrices_differ ($cl1c, $cl1d, 'PHYLO JACCARD vs SORENSON');

    #  now we need to check if we get differences when the arguments differ
    my $tree_ref2 = $tree_ref1->clone;
    foreach my $node (values %{$tree_ref2->get_node_hash}) {
        $node->set_length (length => ($node->get_length + rand()));
        $node->delete_cached_values;
    }
    $tree_ref2->delete_cached_values;
    $tree_ref2->delete_cached_values_below;

    ok (!$tree_ref1->trees_are_same(comparison => $tree_ref2), 'tree2 is not the same as tree1');

    my $cl1e = $bd1->add_output (name => 'cl1e mx recyc', type => $type);
    $cl1e->run_analysis (%analysis_args, tree_ref => $tree_ref2, index => 'PHYLO_JACCARD');

    ok (
        !$cl1c->trees_are_same (comparison => $cl1e),
        'Clustering does not reycle matrices when phylo index same but tree differs',
    );

    check_matrices_differ ($cl1c, $cl1e, 'PHYLO JACCARD vs PHYLO JACCARD different tree');

    #  now we try with a different basedata
    my $cl2c = $bd1->add_output (name => 'cl2c mx recyc', type => $type);
    $cl2c->run_analysis (%analysis_args, index => 'PHYLO_JACCARD');

    ok (
        $cl1c->trees_are_same (comparison => $cl2c),
        'Clustering same for different basedatas when tree_ref same',
    );

    check_matrices_differ ($cl1c, $cl2c, 'PHYLO JACCARD vs PHYLO JACCARD', 'use_is');

}

sub check_matrices_differ {
    my ($cl1a, $cl1b, $msg_suffix, $use_is) = @_;

    my @mx1a = $cl1a->get_orig_matrices;
    my @mx1b = $cl1b->get_orig_matrices;
    
    my @elements = $mx1a[0]->get_elements_as_array;

    my ($i, $same_count) = (0, 0);
    EL1:
    foreach my $el1 (@elements) {
        EL2:
        foreach my $el2 (@elements) {
            next EL2 if $el1 eq $el2;
            my $val1 = $mx1a[0]->get_defined_value_aa ($el1, $el2);
            my $val2 = $mx1b[0]->get_defined_value_aa ($el1, $el2);

            $i++;
            $same_count ++ if $val1 == $val2;
            last EL1 if $val1 != $val2;
        }
    }
    if ($use_is) {
        is ($i, $same_count, 'matrices same ' . $msg_suffix);
    }
    else {
        isnt ($i, $same_count, 'matrices do not match so therefore were not recycled ' . $msg_suffix);
    }
}


1;

__DATA__


@@ SITE_DATA_NEWICK_TREE
link_average (((((('3250000:950000':0.333333333333333,'3350000:950000':0.333333333333333)'75___':0.083333333333334,'3350000:850000':0.416666666666667)'93___':0.203703703703703,'3250000:750000':0.62037037037037)'109___':0.168342013736751,(((((('3350000:1150000':0,'3450000:1350000':0,'3550000:1550000':0,'3350000:1050000':0,'3350000:1250000':0,'3450000:1550000':0,'3350000:1350000':0,'3450000:1450000':0)'38___':0.333333333333333,'3550000:1450000':0.333333333333333)'84___':0.018518518518519,('3450000:1250000':0,'3550000:1250000':0)'4___':0.351851851851852)'85___':0.101178451178451,('3650000:1650000':0.2,'3650000:1750000':0.2)'60___':0.253030303030303)'97___':0.090559440559441,'3550000:1950000':0.543589743589744)'105___':0.025367172510029,((('3650000:1450000':0,'3650000:1550000':0)'31___':0.2,'3450000:1050000':0.2)'61___':0.22989417989418,('3650000:1350000':0.2,'3750000:1450000':0.2)'58___':0.22989417989418)'95___':0.139062736205593)'107___':0.219755468007348)'118___':0.139519699240052,((((('3350000:2050000':0,'3450000:2150000':0,'3250000:2850000':0,'3550000:2150000':0)'23___':0.333333333333333,'3750000:1750000':0.333333333333333)'74___':0.116666666666667,(('3550000:2050000':0.142857142857143,'3550000:2250000':0.142857142857143)'50___':0.123809523809524,('3350000:2150000':0,'3450000:2050000':0)'35___':0.266666666666667)'67___':0.183333333333333)'96___':0.24389770723104,(((('3650000:1950000':0.111111111111111,'3650000:2050000':0.111111111111111)'43___':0.044444444444445,'3750000:2050000':0.155555555555556)'52___':0.222222222222222,'3750000:1950000':0.377777777777778)'88___':0.026984126984127,'3650000:1850000':0.404761904761905)'91___':0.289135802469135)'113___':0.056669186192996,(('3150000:2950000':0,'3250000:2150000':0)'11___':0.333333333333333,'3250000:2950000':0.333333333333333)'73___':0.417233560090703)'116___':0.177665189923137)'124___':0.0349067652113,(((((((((('3550000:950000':0.25,'3650000:1150000':0.25)'65___':0.179292929292929,(('3450000:950000':0.125,'3550000:1050000':0.125)'46___':0.075,'3550000:1150000':0.2)'56___':0.229292929292929)'94___':0.088638028638029,('3450000:1150000':0.25,'3450000:850000':0.25)'66___':0.267930957930958)'103___':0.11516095016095,('3750000:1350000':0.333333333333333,'3850000:1650000':0.333333333333333)'77___':0.299758574758575)'110___':0.026499734833068,'3750000:1550000':0.659591642924976)'112___':0.0511392899791321,((((('3350000:750000':0.333333333333333,'3450000:750000':0.333333333333333)'76___':0.067969816131581,((('2950000:650000':0.0909090909090909,'3050000:650000':0.0909090909090909)'42___':0.107808857808858,'3050000:750000':0.198717948717949)'54___':0.06996891996892,('3150000:650000':0,'2850000:750000':0,'2950000:750000':0)'41___':0.268686868686869)'69___':0.132616280778045)'90___':0.09259184443008,'2750000:750000':0.493894993894994)'101___':0.018452781786115,(((((('3050000:150000':0,'2850000:650000':0,'3150000:50000':0,'3050000:350000':0,'3250000:150000':0)'27___':0.142857142857143,'3150000:350000':0.142857142857143)'49___':0.079365079365079,('3050000:50000':0,'3250000:450000':0)'12___':0.222222222222222)'62___':0.01765873015873,(('3150000:150000':0,'3150000:250000':0)'16___':0.142857142857143,'3250000:250000':0.142857142857143)'47___':0.097023809523809)'63___':0.087391774891775,'3250000:350000':0.327272727272727)'72___':0.051034151034151,(('2750000:650000':0,'3050000:550000':0)'32___':0.2,'2650000:650000':0.2)'57___':0.178306878306878)'89___':0.134040897374231)'102___':0.066874027647837,((('3250000:650000':0.142857142857143,'3350000:650000':0.142857142857143)'51___':0.123809523809524,'3450000:650000':0.266666666666667)'68___':0.211111111111111,('2950000:50000':0,'3150000:550000':0,'2550000:1050000':0,'2950000:350000':0)'33___':0.477777777777778)'98___':0.101444025551168)'108___':0.131509129575162)'115___':0.041036540814585,('2550000:750000':0,'2650000:750000':0)'34___':0.751767473718693)'117___':0.11152147677956,((('3050000:850000':0.2,'3250000:850000':0.2)'59___':0.208333333333333,('3150000:750000':0.2,'3150000:850000':0.2)'55___':0.208333333333333)'92___':0.3,('2950000:250000':0,'3050000:250000':0)'14___':0.708333333333333)'114___':0.15495561716492)'121___':0.028471207333334,(((((((('2450000:1050000':0.142857142857143,'2550000:950000':0.142857142857143)'48___':0.053571428571428,'2450000:1150000':0.196428571428571)'53___':0.048280423280424,(('2350000:950000':0,'2450000:950000':0)'1___':0.111111111111111,'2250000:950000':0.111111111111111)'45___':0.133597883597884)'64___':0.082275132275132,('2550000:850000':0,'2650000:950000':0,'2450000:1250000':0,'2150000:1150000':0,'2650000:850000':0)'40___':0.326984126984127)'71___':0.03015873015873,'2750000:850000':0.357142857142857)'86___':0.129563492063492,(('2250000:1050000':0,'2350000:1250000':0,'2750000:950000':0)'37___':0.333333333333333,'2350000:1050000':0.333333333333333)'79___':0.153373015873016)'100___':0.149305555555556,(('2150000:1050000':0,'2350000:1150000':0)'36___':0.333333333333333,'2250000:1250000':0.333333333333333)'81___':0.302678571428572)'111___':0.161080827067669,(('1950000:1450000':0,'1950000:1350000':0,'2050000:1350000':0)'39___':0.333333333333333,('2050000:1250000':0,'2150000:1250000':0)'7___':0.333333333333333)'78___':0.463759398496241)'119___':0.0946674260020131)'122___':0.033730189503183,((((((('3750000:1850000':0,'3850000:1350000':0,'3950000:1750000':0)'13___':0.333333333333333,'3650000:1250000':0.333333333333333)'82___':0.041666666666667,'3750000:1250000':0.375)'87___':0.105,('3850000:1850000':0.333333333333333,'3850000:1950000':0.333333333333333)'80___':0.146666666666667)'99___':0.05265306122449,'3750000:1650000':0.53265306122449)'104___':0.034840325018896,(('3850000:1450000':0.111111111111111,'3850000:1750000':0.111111111111111)'44___':0.180555555555556,'3850000:1550000':0.291666666666667)'70___':0.275826719576719)'106___':0.235392616642617,(('3250000:3050000':0,'3650000:2350000':0)'2___':0.333333333333333,'3750000:2150000':0.333333333333333)'83___':0.46955266955267)'120___':0.122604344448767)'123___':0.037648501223703)'125___':0
link_recalculate (((((('2250000:1050000':0,'2350000:1250000':0,'2750000:950000':0)'37___':0.333333333333333,'2350000:1050000':0.333333333333333)'89___':0.166666666666667,('3450000:1250000':0,'3550000:1250000':0)'4___':0.5)'108___':0.166666666666667,((('1950000:1450000':0,'1950000:1350000':0,'2050000:1350000':0)'39___':0.333333333333333,('2050000:1250000':0,'2150000:1250000':0)'7___':0.333333333333333)'81___':0.166666666666667,'2250000:1250000':0.5)'104___':0.166666666666667)'123___':0.047619047619047,(((((((('3250000:3050000':0,'3650000:2350000':0)'2___':0.333333333333333,'3550000:1450000':0.333333333333333)'82___':0.266666666666667,('3650000:1650000':0.2,'3650000:1750000':0.2)'59___':0.4)'115___':-0.1,((((('3350000:1150000':0,'3450000:1350000':0,'3550000:1550000':0,'3350000:1050000':0,'3350000:1250000':0,'3450000:1550000':0,'3350000:1350000':0,'3450000:1450000':0)'38___':0.333333333333333,('3550000:2050000':0.142857142857143,'3550000:2250000':0.142857142857143)'50___':0.19047619047619,('3350000:2050000':0,'3450000:2150000':0,'3250000:2850000':0,'3550000:2150000':0)'23___':0.333333333333333,'3750000:1750000':0.333333333333333,('3350000:2150000':0,'3450000:2050000':0)'35___':0.333333333333333,('3150000:2950000':0,'3250000:2150000':0)'11___':0.333333333333333)'92___':0.066666666666667,(('3650000:1950000':0.111111111111111,'3650000:2050000':0.111111111111111)'43___':0.088888888888889,'3750000:2050000':0.2)'58___':0.2)'95___':-0.066666666666667,'3750000:1950000':0.333333333333333)'96___':0.121212121212122,'3550000:1950000':0.454545454545455)'101___':0.045454545454545)'116___':0.136363636363636,'3650000:1850000':0.636363636363636)'118___':0.0303030303030309,((('3750000:1850000':0,'3850000:1350000':0,'3950000:1750000':0)'13___':0.333333333333333,'3750000:1250000':0.333333333333333)'86___':0.166666666666667,'3250000:2950000':0.5)'107___':0.166666666666667)'120___':-0.095238095238096,('3750000:1650000':0.6,'3850000:1950000':0.6)'117___':-0.028571428571429)'121___':0.095238095238096,((((('3250000:950000':0.333333333333333,'3350000:850000':0.333333333333333)'77___':0.166666666666667,'3350000:950000':0.5)'105___':-0.1,'3250000:750000':0.4)'106___':0.138461538461538,(((((('2950000:50000':0,'3150000:550000':0,'2550000:1050000':0,'2950000:350000':0)'33___':0.333333333333333,'3450000:650000':0.333333333333333)'83___':0.095238095238096,('3550000:950000':0.25,'3650000:1150000':0.25)'64___':0.178571428571429,'3750000:2150000':0.428571428571429)'98___':0.025974025974026,(('3750000:1350000':0.333333333333333,'3850000:1650000':0.333333333333333)'74___':-0.133333333333333,'3850000:1850000':0.2)'75___':0.254545454545455)'99___':-0.025974025974026,(('3850000:1450000':0.111111111111111,'3850000:1750000':0.111111111111111)'44___':0.222222222222222,'3650000:1250000':0.333333333333333,'3850000:1550000':0.333333333333333)'93___':0.095238095238096)'100___':0.032967032967033,(((('3150000:650000':0,'2850000:750000':0,'2950000:750000':0)'41___':0.333333333333333,'3450000:750000':0.333333333333333)'78___':-0.033333333333333,(((('3250000:650000':0.142857142857143,'3350000:650000':0.142857142857143)'51___':0.057142857142857,('2950000:650000':0.0909090909090909,'3050000:650000':0.0909090909090909)'42___':0.109090909090909,'3150000:350000':0.2)'60___':0.030769230769231,'3050000:750000':0.230769230769231)'62___':0.032388663967611,'3350000:750000':0.263157894736842)'67___':0.036842105263158)'79___':0.033333333333333,((('3450000:1150000':0.25,'3450000:850000':0.25)'63___':0.022727272727273,(('3650000:1450000':0,'3650000:1550000':0)'31___':0.2,'3450000:1050000':0.2)'56___':0.072727272727273)'68___':0.02139037433155,(('3450000:950000':0.125,'3550000:1050000':0.125)'46___':0.125,'3550000:1150000':0.25)'65___':0.044117647058823)'69___':0.03921568627451)'84___':0.128205128205129)'102___':0.076923076923076)'113___':0.00992555831265596,((((('2950000:250000':0,'3050000:250000':0)'14___':0.333333333333333,('3050000:50000':0,'3250000:450000':0)'12___':0.333333333333333)'85___':0.166666666666667,'3250000:350000':0.5)'110___':-0.166666666666667,(('2550000:750000':0,'2650000:750000':0)'34___':0.2,('2750000:650000':0,'3050000:550000':0)'32___':0.2,'2650000:650000':0.2)'61___':0.133333333333333)'111___':0.133333333333334,(((('2350000:950000':0,'2450000:950000':0)'1___':0.111111111111111,'2250000:950000':0.111111111111111)'45___':0.222222222222222,'2750000:850000':0.333333333333333)'70___':0.051282051282052,'2750000:750000':0.384615384615385)'94___':0.082051282051282,((('2450000:1050000':0.142857142857143,'2550000:950000':0.142857142857143)'49___':0.107142857142857,(('3050000:150000':0,'2850000:650000':0,'3150000:50000':0,'3050000:350000':0,'3250000:150000':0)'27___':0.142857142857143,('3150000:150000':0,'3150000:250000':0)'16___':0.142857142857143,'3250000:250000':0.142857142857143)'48___':0.107142857142857)'66___':0.083333333333333,'2450000:1150000':0.333333333333333,('2550000:850000':0,'2650000:950000':0,'2450000:1250000':0,'2150000:1150000':0,'2650000:850000':0)'40___':0.333333333333333,('2150000:1050000':0,'2350000:1150000':0)'36___':0.333333333333333)'91___':0.133333333333334)'112___':0.0817204301075269)'114___':0.118279569892473,(('3650000:1350000':0.2,'3750000:1450000':0.2)'57___':0.3,'3750000:1550000':0.5)'109___':0.166666666666667)'122___':0.047619047619047)'124___':0.109243697478992,(('3050000:850000':0.2,'3250000:850000':0.2)'55___':0.133333333333333,('3150000:750000':0.2,'3150000:850000':0.2)'54___':0.133333333333333)'88___':0.490196078431373)'125___':0
link_average_unweighted (((((((((('3650000:1450000':0,'3650000:1550000':0)'31___':0.2,'3450000:1050000':0.2)'61___':0.254365079365079,('3650000:1350000':0.2,'3750000:1450000':0.2)'58___':0.254365079365079)'96___':0.128230103230104,'3250000:750000':0.582595182595183)'107___':0.114602238039738,(((('3350000:1150000':0,'3450000:1350000':0,'3550000:1550000':0,'3350000:1050000':0,'3350000:1250000':0,'3450000:1550000':0,'3350000:1350000':0,'3450000:1450000':0)'38___':0.333333333333333,('3450000:1250000':0,'3550000:1250000':0)'4___':0.333333333333333)'77___':0.083333333333334,'3550000:1450000':0.416666666666667)'91___':0.1,('3650000:1650000':0.2,'3650000:1750000':0.2)'60___':0.316666666666667)'101___':0.180530753968254)'113___':0.100027619949495,((((('3650000:1950000':0.111111111111111,'3650000:2050000':0.111111111111111)'43___':0.044444444444445,'3750000:2050000':0.155555555555556)'52___':0.227777777777777,'3750000:1950000':0.383333333333333)'86___':0.033333333333334,'3650000:1850000':0.416666666666667)'90___':0.16235119047619,'3550000:1950000':0.579017857142857)'106___':0.218207183441559)'119___':0.0753940070346319,(('3250000:950000':0.333333333333333,'3350000:950000':0.333333333333333)'71___':0.083333333333334,'3350000:850000':0.416666666666667)'92___':0.455952380952381)'121___':0.0604032089871931,(((('3350000:2050000':0,'3450000:2150000':0,'3250000:2850000':0,'3550000:2150000':0)'23___':0.333333333333333,'3750000:1750000':0.333333333333333)'81___':0.129166666666667,(('3550000:2050000':0.142857142857143,'3550000:2250000':0.142857142857143)'50___':0.123809523809524,('3350000:2150000':0,'3450000:2050000':0)'35___':0.266666666666667)'65___':0.195833333333333)'99___':0.289583333333333,(('3150000:2950000':0,'3250000:2150000':0)'11___':0.333333333333333,'3250000:2950000':0.333333333333333)'79___':0.41875)'117___':0.180938923272908)'123___':0.028241492161188,(((((((('2750000:650000':0,'3050000:550000':0)'32___':0.2,'2650000:650000':0.2)'57___':0.15,('2550000:750000':0,'2650000:750000':0)'34___':0.35)'85___':0.166666666666667,'2750000:750000':0.516666666666667)'102___':0.092593517593517,((('3350000:750000':0.333333333333333,'3450000:750000':0.333333333333333)'83___':0.086675020885548,(('3450000:950000':0.125,'3550000:1050000':0.125)'46___':0.075,'3550000:1150000':0.2)'56___':0.220008354218881)'93___':0.03827190718638,('3450000:1150000':0.25,'3450000:850000':0.25)'62___':0.208280261405261)'97___':0.150979922854923)'110___':0.134788048514496,((((('2950000:650000':0.0909090909090909,'3050000:650000':0.0909090909090909)'42___':0.107808857808858,'3050000:750000':0.198717948717949)'54___':0.086130536130536,('3150000:650000':0,'2850000:750000':0,'2950000:750000':0)'41___':0.284848484848485)'69___':0.114273313492063,(((('3050000:150000':0,'2850000:650000':0,'3150000:50000':0,'3050000:350000':0,'3250000:150000':0)'27___':0.142857142857143,'3150000:350000':0.142857142857143)'49___':0.123809523809524,('3050000:50000':0,'3250000:450000':0)'12___':0.266666666666667)'64___':0.011011904761904,(('3150000:150000':0,'3150000:250000':0)'16___':0.142857142857143,'3250000:250000':0.142857142857143)'47___':0.134821428571428)'68___':0.121443226911977)'87___':0.157475423881674,(('2950000:250000':0,'3050000:250000':0)'14___':0.333333333333333,'3250000:350000':0.333333333333333)'75___':0.223263888888889)'104___':0.187451010552458)'116___':0.10677371003945,(('3050000:850000':0.2,'3250000:850000':0.2)'59___':0.208333333333333,('3150000:750000':0.2,'3150000:850000':0.2)'55___':0.208333333333333)'88___':0.442488609480797)'120___':0.076286087095414,((((('3750000:1250000':0.333333333333333,'3850000:1850000':0.333333333333333)'80___':0.136904761904762,('3750000:1350000':0.333333333333333,'3850000:1650000':0.333333333333333)'72___':0.136904761904762)'100___':0.123214285714286,(('3250000:3050000':0,'3650000:2350000':0)'2___':0.333333333333333,'3750000:2150000':0.333333333333333)'74___':0.260119047619048)'109___':0.115277777777778,(((('3750000:1850000':0,'3850000:1350000':0,'3950000:1750000':0)'13___':0.333333333333333,'3650000:1250000':0.333333333333333)'84___':0.083333333333334,'3850000:1950000':0.416666666666667)'89___':0.166071428571428,(('3850000:1450000':0.111111111111111,'3850000:1750000':0.111111111111111)'44___':0.180555555555556,'3850000:1550000':0.291666666666667)'70___':0.291071428571428)'108___':0.125992063492064)'114___':0.0437019469246031,((((('3250000:650000':0.142857142857143,'3350000:650000':0.142857142857143)'51___':0.123809523809524,'3450000:650000':0.266666666666667)'66___':0.175,('2950000:50000':0,'3150000:550000':0,'2550000:1050000':0,'2950000:350000':0)'33___':0.441666666666667)'95___':0.130952380952381,'3750000:1650000':0.572619047619048)'105___':0.11281001984127,(('3550000:950000':0.25,'3650000:1150000':0.25)'63___':0.305555555555556,'3750000:1550000':0.555555555555556)'103___':0.129873511904762)'112___':0.0670030381944441)'118___':0.174675924254782)'122___':0.034155718857885)'124___':0.0206081758641999,(((((('2550000:850000':0,'2650000:950000':0,'2450000:1250000':0,'2150000:1150000':0,'2650000:850000':0)'40___':0.333333333333333,('2250000:1050000':0,'2350000:1250000':0,'2750000:950000':0)'37___':0.333333333333333)'78___':0.108333333333334,('2350000:1050000':0.333333333333333,'2750000:850000':0.333333333333333)'76___':0.108333333333334)'94___':0.020089285714285,((('2450000:1050000':0.142857142857143,'2550000:950000':0.142857142857143)'48___':0.053571428571428,'2450000:1150000':0.196428571428571)'53___':0.071428571428572,(('2350000:950000':0,'2450000:950000':0)'1___':0.111111111111111,'2250000:950000':0.111111111111111)'45___':0.156746031746032)'67___':0.193898809523809)'98___':0.220238095238096,(('2150000:1050000':0,'2350000:1150000':0)'36___':0.333333333333333,'2250000:1250000':0.333333333333333)'82___':0.348660714285715)'111___':0.049107142857143,(('1950000:1450000':0,'1950000:1350000':0,'2050000:1350000':0)'39___':0.333333333333333,('2050000:1250000':0,'2150000:1250000':0)'7___':0.333333333333333)'73___':0.397767857142858)'115___':0.250770734155438)'125___':0
link_minimum ((('3750000:1650000':0.428571428571429,(('3850000:1950000':0.333333333333333,('2950000:50000':0,'3150000:550000':0,'2550000:1050000':0,'2950000:350000':0)'33___':0.333333333333333,'3850000:1850000':0.333333333333333,'3650000:1850000':0.333333333333333,'3350000:950000':0.333333333333333,'3750000:1350000':0.333333333333333,'3850000:1650000':0.333333333333333,'3250000:950000':0.333333333333333,'3350000:850000':0.333333333333333,('3150000:750000':0.2,'3150000:850000':0.2,'3050000:850000':0.2,'3250000:850000':0.2)'65___':0.133333333333333,('2950000:250000':0,'3050000:250000':0)'14___':0.333333333333333,('3450000:1250000':0,'3550000:1250000':0)'4___':0.333333333333333,'3450000:750000':0.333333333333333,('2150000:1050000':0,'2350000:1150000':0)'36___':0.333333333333333,('3650000:2050000':0.111111111111111,'3650000:1950000':0.111111111111111,'3750000:2050000':0.111111111111111)'47___':0.222222222222222,'3750000:1950000':0.333333333333333,((((('3450000:950000':0.125,'3550000:1050000':0.125)'48___':0.075,'3550000:1150000':0.2)'71___':0.030769230769231,'3450000:850000':0.230769230769231)'75___':0.019230769230769,'3450000:1150000':0.25)'78___':0.022727272727273,(('3650000:1450000':0,'3650000:1550000':0)'31___':0.2,'3450000:1050000':0.2)'69___':0.072727272727273)'81___':0.06060606060606,('3650000:1350000':0.2,'3750000:1450000':0.2)'73___':0.133333333333333,('1950000:1450000':0,'1950000:1350000':0,'2050000:1350000':0)'39___':0.333333333333333,'2250000:1250000':0.333333333333333,('3250000:3050000':0,'3650000:2350000':0)'2___':0.333333333333333,'3550000:1450000':0.333333333333333,('2050000:1250000':0,'2150000:1250000':0)'7___':0.333333333333333,('3650000:1650000':0.2,'3650000:1750000':0.2)'68___':0.133333333333333,('3350000:1150000':0,'3450000:1350000':0,'3550000:1550000':0,'3350000:1050000':0,'3350000:1250000':0,'3450000:1550000':0,'3350000:1350000':0,'3450000:1450000':0)'38___':0.333333333333333,'3650000:1250000':0.333333333333333,(('3850000:1450000':0.111111111111111,'3850000:1750000':0.111111111111111)'46___':0.138888888888889,'3850000:1550000':0.25)'79___':0.083333333333333,((('3250000:350000':0.2,('3150000:650000':0,'2850000:750000':0,'2950000:750000':0)'41___':0.2,('3050000:50000':0,'3250000:450000':0)'12___':0.2,('2550000:750000':0,'2650000:750000':0)'34___':0.2,((('3150000:150000':0,'3150000:250000':0)'16___':0.142857142857143,'3250000:250000':0.142857142857143,(('2950000:650000':0.0909090909090909,'3050000:650000':0.0909090909090909)'42___':0.0202020202020201,'3150000:350000':0.111111111111111)'45___':0.031746031746032,('3050000:150000':0,'2850000:650000':0,'3150000:50000':0,'3050000:350000':0,'3250000:150000':0)'27___':0.142857142857143)'55___':0.023809523809524,'3050000:750000':0.166666666666667)'57___':0.033333333333333,('2750000:650000':0,'3050000:550000':0)'32___':0.2,'2650000:650000':0.2,('3250000:650000':0.142857142857143,'3350000:650000':0.142857142857143)'52___':0.057142857142857,'3450000:650000':0.2)'74___':0.05,(((('2350000:950000':0,'2450000:950000':0)'1___':0.111111111111111,'2250000:950000':0.111111111111111)'43___':0.031746031746032,'2450000:1050000':0.142857142857143,'2450000:1150000':0.142857142857143,'2550000:950000':0.142857142857143)'54___':0.057142857142857,('2550000:850000':0,'2650000:950000':0,'2450000:1250000':0,'2150000:1150000':0,'2650000:850000':0)'40___':0.2)'58___':0.05,'2750000:850000':0.25)'80___':0.044117647058823,'3350000:750000':0.294117647058823)'82___':0.03921568627451,(('3550000:2050000':0.142857142857143,'3550000:2250000':0.142857142857143)'56___':0.057142857142857,('3350000:2150000':0,'3450000:2050000':0)'35___':0.2)'60___':0.133333333333333,('3150000:2950000':0,'3250000:2150000':0)'11___':0.333333333333333,'3250000:2950000':0.333333333333333,('3750000:1850000':0,'3850000:1350000':0,'3950000:1750000':0)'13___':0.333333333333333,'3750000:1250000':0.333333333333333,('3550000:950000':0.25,'3650000:1150000':0.25)'77___':0.083333333333333,'3750000:2150000':0.333333333333333,('2250000:1050000':0,'2350000:1250000':0,'2750000:950000':0)'37___':0.333333333333333,'2350000:1050000':0.333333333333333,('3350000:2050000':0,'3450000:2150000':0,'3250000:2850000':0,'3550000:2150000':0)'23___':0.333333333333333,'3750000:1750000':0.333333333333333)'120___':0.066666666666667,'2750000:750000':0.4)'121___':0.028571428571429,'3550000:1950000':0.428571428571429)'123___':0.015873015873015,'3250000:750000':0.444444444444444)'124___':0.055555555555556,'3750000:1550000':0.5)'125___':0
link_maximum ((((('3350000:750000':0.333333333333333,'3450000:750000':0.333333333333333)'78___':0.140350877192983,(('3450000:950000':0.125,'3550000:1050000':0.125)'46___':0.075,'3550000:1150000':0.2)'53___':0.273684210526316)'86___':0.16267942583732,('3450000:1150000':0.25,'3450000:850000':0.25)'63___':0.386363636363636)'101___':0.163636363636364,(((('2950000:650000':0.0909090909090909,'3050000:650000':0.0909090909090909)'42___':0.13986013986014,'3050000:750000':0.230769230769231)'60___':0.307692307692307,'2750000:750000':0.538461538461538)'91___':0.017094017094018,((('2750000:650000':0,'3050000:550000':0)'32___':0.2,'2650000:650000':0.2)'55___':0.3,('2550000:750000':0,'2650000:750000':0)'34___':0.5)'89___':0.055555555555556)'94___':0.244444444444444)'111___':0.2,(((('3250000:3050000':0,'3650000:2350000':0)'2___':0.333333333333333,'3750000:2150000':0.333333333333333)'81___':0.333333333333334,('3750000:1250000':0.333333333333333,'3750000:1350000':0.333333333333333)'71___':0.333333333333334)'103___':0.083333333333333,(('3850000:1650000':0.333333333333333,'3850000:1850000':0.333333333333333)'73___':0.222222222222223,('3250000:650000':0.142857142857143,'3350000:650000':0.142857142857143)'51___':0.412698412698413)'95___':0.194444444444444)'110___':0.25,(('2350000:1050000':0.333333333333333,'2750000:850000':0.333333333333333)'64___':0.333333333333334,(((('2450000:1050000':0.142857142857143,'2550000:950000':0.142857142857143)'48___':0.107142857142857,'2450000:1150000':0.25)'62___':0.083333333333333,(('2350000:950000':0,'2450000:950000':0)'1___':0.111111111111111,'2250000:950000':0.111111111111111)'45___':0.222222222222222)'80___':0.095238095238096,('2550000:850000':0,'2650000:950000':0,'2450000:1250000':0,'2150000:1150000':0,'2650000:850000':0)'40___':0.428571428571429)'84___':0.238095238095238,(('2250000:1050000':0,'2350000:1250000':0,'2750000:950000':0)'37___':0.333333333333333,('2050000:1250000':0,'2150000:1250000':0)'7___':0.333333333333333)'68___':0.333333333333334)'106___':0.333333333333333,(('3250000:950000':0.333333333333333,'3350000:950000':0.333333333333333)'75___':0.166666666666667,'3350000:850000':0.5)'90___':0.5,(((('2950000:50000':0,'3150000:550000':0,'2550000:1050000':0,'2950000:350000':0)'33___':0.333333333333333,'3450000:650000':0.333333333333333)'67___':0.266666666666667,'3750000:1650000':0.6)'98___':0.15,(('3550000:950000':0.25,'3650000:1150000':0.25)'61___':0.305555555555556,'3750000:1550000':0.555555555555556)'93___':0.194444444444444)'109___':0.25,(('3150000:750000':0.2,'3150000:850000':0.2)'59___':0.4,('3050000:850000':0.2,'3250000:850000':0.2)'54___':0.4)'96___':0.4,(((('3050000:150000':0,'2850000:650000':0,'3150000:50000':0,'3050000:350000':0,'3250000:150000':0)'27___':0.142857142857143,'3150000:350000':0.142857142857143)'49___':0.19047619047619,'3250000:350000':0.333333333333333)'69___':0.266666666666667,(('2950000:250000':0,'3050000:250000':0)'14___':0.333333333333333,('3050000:50000':0,'3250000:450000':0)'12___':0.333333333333333)'66___':0.266666666666667)'100___':0.4,('1950000:1450000':0,'1950000:1350000':0,'2050000:1350000':0)'39___':1,((('3650000:1250000':0.333333333333333,'3850000:1550000':0.333333333333333)'76___':0.095238095238096,('3850000:1450000':0.111111111111111,'3850000:1750000':0.111111111111111)'44___':0.317460317460318)'83___':0.285714285714285,(('3750000:1850000':0,'3850000:1350000':0,'3950000:1750000':0)'13___':0.333333333333333,'3850000:1950000':0.333333333333333)'74___':0.380952380952381)'108___':0.285714285714286,((('2150000:1050000':0,'2350000:1150000':0)'36___':0.333333333333333,'2250000:1250000':0.333333333333333)'72___':0.380952380952381,((('3150000:150000':0,'3150000:250000':0)'16___':0.142857142857143,'3250000:250000':0.142857142857143)'47___':0.19047619047619,('3150000:650000':0,'2850000:750000':0,'2950000:750000':0)'41___':0.333333333333333)'65___':0.380952380952381)'107___':0.285714285714286,(((('3550000:1450000':0.5,(('3350000:1150000':0,'3450000:1350000':0,'3550000:1550000':0,'3350000:1050000':0,'3350000:1250000':0,'3450000:1550000':0,'3350000:1350000':0,'3450000:1450000':0)'38___':0.333333333333333,'3750000:1750000':0.333333333333333)'79___':0.166666666666667,('3450000:1250000':0,'3550000:1250000':0)'4___':0.5)'88___':0.1,'3550000:1950000':0.6)'99___':0.066666666666667,('3650000:1650000':0.2,'3650000:1750000':0.2)'57___':0.466666666666667)'104___':0.133333333333333,((('3650000:1350000':0.2,'3750000:1450000':0.2)'56___':0.355555555555556,(('3650000:1450000':0,'3650000:1550000':0)'31___':0.2,'3450000:1050000':0.2)'52___':0.355555555555556)'92___':0.08080808080808,'3250000:750000':0.636363636363636)'102___':0.163636363636364)'112___':0.2,(('3150000:2950000':0,'3250000:2150000':0)'11___':0.333333333333333,'3250000:2950000':0.333333333333333)'77___':0.666666666666667,((('3350000:2150000':0,'3450000:2050000':0)'35___':0.333333333333333,('3350000:2050000':0,'3450000:2150000':0,'3250000:2850000':0,'3550000:2150000':0)'23___':0.333333333333333)'70___':0.266666666666667,('3550000:2050000':0.142857142857143,'3550000:2250000':0.142857142857143)'50___':0.457142857142857)'97___':0.4,(((('3650000:1950000':0.111111111111111,'3650000:2050000':0.111111111111111)'43___':0.088888888888889,'3750000:2050000':0.2)'58___':0.2,'3750000:1950000':0.4)'82___':0.028571428571429,'3650000:1850000':0.428571428571429)'85___':0.571428571428571)'125___':0
