#!/usr/bin/perl -w
use strict;
use warnings;

use Test::More tests => 21;

local $| = 1;

use mylib;

use Biodiverse::ReadNexus;
use Biodiverse::Tree;

#  from Statistics::Descriptive
sub is_between
{
    local $Test::Builder::Level = $Test::Builder::Level + 1;
    
    my ($have, $want_bottom, $want_top, $blurb) = @_;

    ok (
        (($have >= $want_bottom) &&
        ($want_top >= $have)),
        $blurb
    );
}




my $tol = 1E-13;

#  clean read of 'neat' nexus file
{
    my $nex_tree = get_nex_tree();

    my $trees = Biodiverse::ReadNexus->new;
    my $result = eval {
        $trees->import_data (data => $nex_tree);
    };

    is ($result, 1, 'import nexus trees, no remap');

    my @trees = $trees->get_tree_array;

    is (scalar @trees, 2, 'two trees extracted');

    my $tree = $trees[0];

    run_tests ($tree);
}


#  clean read of working newick file
{
    my $data = get_newick_tree();

    my $trees = Biodiverse::ReadNexus->new;
    my $result = eval {
        $trees->import_data (data => $data);
    };

    is ($result, 1, 'import clean newick trees, no remap');

    my @trees = $trees->get_tree_array;

    is (scalar @trees, 1, 'one tree extracted');

    my $tree = $trees[0];

    run_tests ($tree);
}


#  read of a 'messy' nexus file with no newlines
{
    my $data = get_nex_tree();

    #  eradicate newlines
    $data =~ s/[\r\n]+//gs;
    #print $data;
    TODO:
    {
        local $TODO = 'issue 149';

        my $trees = Biodiverse::ReadNexus->new;
        my $result = eval {
            $trees->import_data (data => $data);
        };
    
        is ($result, 1, 'import nexus trees, no newlines, no remap');
    
        my @trees = $trees->get_tree_array;
    
        is (scalar @trees, 2, 'two trees extracted');
    
        my $tree = $trees[0];

        run_tests ($tree);
    }
}



sub run_tests {
    my $tree = shift;

    my @tests = (
        {sub => 'get_node_count',    ex => 61,},
        {sub => 'get_tree_depth',    ex => 12,},
        {sub => 'get_tree_length',   ex => 0.992769230769231,},
        {sub => 'get_length_to_tip', ex => 0.992769230769231,},

        {sub => 'get_total_tree_length',  ex => 21.1822419987155,},    
    );

    foreach my $test (@tests) {
        my $sub   = $test->{sub};
        my $upper = $test->{ex} + $tol;
        my $lower = $test->{ex} - $tol;
        my $msg = "$sub expected $test->{ex}";

        #my $val = $tree->$sub;
        #warn "$msg, $val\n";

        is_between (eval {$tree->$sub}, $lower, $upper, $msg);
    }

    return;    
}


sub get_nex_tree {
    
    my $nex_tree = <<"END_OF_TREE"
#NEXUS
[ID: blah blah]
begin trees;
	[this is a comment with a semicolon ; ]
	Translate 
		0 'Genus:sp9',
		1 'Genus:sp23',
		2 'Genus:sp13',
		3 '18___',
		4 'Genus:sp28',
		5 '15___',
		6 'Genus:sp26',
		7 'Genus:sp21',
		8 '22___',
		9 'Genus:sp18',
		10 '17___',
		11 '26___',
		12 'Genus:sp8',
		13 'Genus:sp3',
		14 '1___',
		15 'Genus:sp14',
		16 'Genus:sp27',
		17 '13___',
		18 'Genus:sp15',
		19 '5___',
		20 '16___',
		21 '6___',
		22 'Genus:sp29',
		23 '23___',
		24 'Genus:sp24',
		25 'Genus:sp31',
		26 '8___',
		27 '0___',
		28 '29___',
		29 '25___',
		30 'Genus:sp16',
		31 'Genus:sp10',
		32 'Genus:sp4',
		33 '21___',
		34 '10___',
		35 'Genus:sp20',
		36 '27___',
		37 '20___',
		38 'Genus:sp2',
		39 '28___',
		40 '24___',
		41 '11___',
		42 'Genus:sp22',
		43 '4___',
		44 'Genus:sp19',
		45 '7___',
		46 'Genus:sp12',
		47 'Genus:sp5',
		48 'Genus:sp17',
		49 '3___',
		50 'Genus:sp6',
		51 '9___',
		52 'Genus:sp30',
		53 '19___',
		54 '2___',
		55 'Genus:sp25',
		56 '12___',
		57 'Genus:sp11',
		58 'Genus:sp1',
		59 'Genus:sp7',
		60 '14___'
		;
	Tree 'Example_tree1' = (((((((((((44:0.6,47:0.6):0.077662337662338,(18:0.578947368421053,58:0.578947368421053):0.098714969241285):0.106700478344225,31:0.784362816006563):0.05703610742759,(6:0.5,35:0.5):0.341398923434153):0.03299436960061,(((((1:0.434782608695652,52:0.434782608695652):0.051317777404734,57:0.486100386100386):0.11249075347436,22:0.598591139574746):0.0272381982058111,46:0.625829337780557):0.172696292660468,(7:0.454545454545455,9:0.454545454545455):0.34398017589557):0.075867662593738):0.057495084175743,((4:0,25:0):0.666666666666667,16:0.666666666666667):0.265221710543839):0.026396763298318,((0:0.789473684210526,12:0.789473684210526):0.111319966583125,(15:0.6,30:0.6):0.300793650793651):0.0574914897151729):0.020427284632173,48:0.978712425140997):0.00121523842637206,(24:0.25,55:0.25):0.729927663567369):0.00291112550535999,((((38:0.461538461538462,13:0.461538461538462):0.160310277957336,(50:0.166666666666667,59:0.166666666666667):0.455182072829131):0.075519681556834,32:0.697368421052632):0.258187134502923,2:0.955555555555555):0.027283233517174):0.00993044169650192,42:0.992769230769231):0;
        Tree 'Example_tree2' = (((((((((((44:0.6,47:0.6):0.077662337662338,(18:0.578947368421053,58:0.578947368421053):0.098714969241285):0.106700478344225,31:0.784362816006563):0.05703610742759,(6:0.5,35:0.5):0.341398923434153):0.03299436960061,(((((1:0.434782608695652,52:0.434782608695652):0.051317777404734,57:0.486100386100386):0.11249075347436,22:0.598591139574746):0.0272381982058111,46:0.625829337780557):0.172696292660468,(7:0.454545454545455,9:0.454545454545455):0.34398017589557):0.075867662593738):0.057495084175743,((4:0,25:0):0.666666666666667,16:0.666666666666667):0.265221710543839):0.026396763298318,((0:0.789473684210526,12:0.789473684210526):0.111319966583125,(15:0.6,30:0.6):0.300793650793651):0.0574914897151729):0.020427284632173,48:0.978712425140997):0.00121523842637206,(24:0.25,55:0.25):0.729927663567369):0.00291112550535999,((((38:0.461538461538462,13:0.461538461538462):0.160310277957336,(50:0.166666666666667,59:0.166666666666667):0.455182072829131):0.075519681556834,32:0.697368421052632):0.258187134502923,2:0.955555555555555):0.027283233517174):0.00993044169650192,42:0.992769230769231):0;
end;
END_OF_TREE
  ;
  
  return $nex_tree;
}

sub get_newick_tree {
    my $nwk_tree=<<"END_OF_NWK"
(((((((((((44:0.6,47:0.6):0.077662337662338,(18:0.578947368421053,58:0.578947368421053):0.098714969241285):0.106700478344225,31:0.784362816006563):0.05703610742759,(6:0.5,35:0.5):0.341398923434153):0.03299436960061,(((((1:0.434782608695652,52:0.434782608695652):0.051317777404734,57:0.486100386100386):0.11249075347436,22:0.598591139574746):0.0272381982058111,46:0.625829337780557):0.172696292660468,(7:0.454545454545455,9:0.454545454545455):0.34398017589557):0.075867662593738):0.057495084175743,((4:0,25:0):0.666666666666667,16:0.666666666666667):0.265221710543839):0.026396763298318,((0:0.789473684210526,12:0.789473684210526):0.111319966583125,(15:0.6,30:0.6):0.300793650793651):0.0574914897151729):0.020427284632173,48:0.978712425140997):0.00121523842637206,(24:0.25,55:0.25):0.729927663567369):0.00291112550535999,((((38:0.461538461538462,13:0.461538461538462):0.160310277957336,(50:0.166666666666667,59:0.166666666666667):0.455182072829131):0.075519681556834,32:0.697368421052632):0.258187134502923,2:0.955555555555555):0.027283233517174):0.00993044169650192,42:0.992769230769231):0;
END_OF_NWK
  ;

    return $nwk_tree;
}